예외와 예외 클래스
예외처리를 하는 이유: 애플리케이션(프로그램)의 정상적인 종료를 위해서

Object -> (Throwable) 오류 -> Error
                          -> Exception -> 일반 예외
                                       -> 실행 예외

자바에서는
하드웨어 고장으로 인해 응용프로그램 실행 오류가 발생 - 에러(Error)
Error 이외에 대한 오류를 예외(Exception)라고 한다.
예외란 것은 잘못된 사용 또는 코딩으로 인한 오류
- 일반 예외(Exception): 컴파일러가 예외 처리 코드 여부를 검사
- 실행 예외(Runtime Exception): 컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외


자바는 예외가 발생하면 에외 클래스로부터 객체를 생성한다.
이 객체는 예외 처리 시 사용되고, 자바의 모든 에러와 예외 클래스는 Throwable 클래스를 상속 받아 만들어지고
추가적으로 예외 클래스는 java.lang.Exception 클래스를 상속 받는다.
실행 예외는 RuntimeException과 그 자식클래스에 해당한다.
java.lang 패키지를 표준 라이브러리 라고 한다. import를 하지 않아도 사용 가능한 라이브러리


예외 처리 코드
예외가 발생했을 때 프로그램의 갑작스러운 종료(비정상적 종료)를 막고,
정상 실행을 유지할 수 있도록 처리하는 코드를 예외 처리 코드라 한다.
try - catch
try - catch - finally

생성자 내부 or 메서드 내부에서 작성된다.

try {
    .....
    문제 발생

} catch(Exception e) {
    처리
} finally {
    항상 실행 (finally는 필수가 아님)
}

프로그래밍의 오류 종류
- 컴파일 에러 (compile-time error) : 컴파일시 발생하는 에러, 문법 구문 오류(syntax error)
- 런타임 에러 (runtime error) : 실행시에 발생하는 에러(설계 미숙시 많이 발생)
- 논리적 에러 (logical error) : 실행은 되지만 의도와 다르게 동작하거나 성능개선을 하다 나타내는 오류
bug(버그), debugging(디버깅), debugger(디버거)

RuntimeException
(ArithmeticException: 산술조건이 발생했을 때 발생)
(NullPointerException: 응용 프로그램이 개체가 필요한 경우 발생)
(IllegalAccessException....)
(ClassCastException....)

4. 리소스 자동 닫기
리소스(resource) => 데이터를 제공하는 객체
리소스는 사용하기 위해 열어야(open)하고, 사용이 끝난 다음에는 닫아야(close) 한다.
자바 내부에 요소가 아니기 때문에, 이러한 프로세스 위부에 있는 데이터에 자바 코드에서 접근하려고 할때 문제가 발생할 수 있다.
이런 입출력 관련된 resource 들에 접근해서 사용하면 닫는 것이 가장 중요함


ex) 파일 내용을 읽기 위해서는 파일을 열어야 하고, 다 읽거나, 쓴 후에는 저장 후 파일을 닫아야 다른 프로그램에서 사용 가능

사용자 정의 예외
컴파일러가 체크하는 일반 예외로 선언할 수 도 있고, 컴파일러가 체크하지 못하는 실행 예외도 정의하여